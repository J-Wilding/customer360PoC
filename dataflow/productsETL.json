{
	"name": "productsETL",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "customerIDs",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "Products",
						"type": "DatasetReference"
					},
					"name": "Products"
				},
				{
					"dataset": {
						"referenceName": "productNameTypeDesc",
						"type": "DatasetReference"
					},
					"name": "ProductNameTypeDescList"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pProducts_clean",
						"type": "DatasetReference"
					},
					"name": "ProductsClean"
				},
				{
					"dataset": {
						"referenceName": "pProductsErrors",
						"type": "DatasetReference"
					},
					"name": "productsErrors"
				}
			],
			"transformations": [
				{
					"name": "Assert1"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "Filter1"
				},
				{
					"name": "CustomerIDExists"
				},
				{
					"name": "Union1"
				},
				{
					"name": "NameTypeDescExists"
				}
			],
			"script": "source(output(\n\t\tcustomer_id as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tdateFormats: ['MM/dd/yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy HH:mm:ss']) ~> Customers\nsource(output(\n\t\tproduct_id as long,\n\t\tproduct_name as string,\n\t\tproduct_type as string,\n\t\tproduct_description as string,\n\t\tissue_date as timestamp,\n\t\tvalid_till_date as timestamp,\n\t\taccount_status as string,\n\t\tcredit_card_limit as long,\n\t\tinterest_rate as double,\n\t\ttenure as long,\n\t\tservice_charges as long,\n\t\tcustomer_id as long,\n\t\tfd_principal_amount as long,\n\t\tloan_collateral_value as long,\n\t\tloan_amount as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tdateFormats: ['yyyy/MM/dd']) ~> Products\nsource(output(\n\t\tproduct_name as string,\n\t\tproduct_type as string,\n\t\tproduct_description as string,\n\t\tcount as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> ProductNameTypeDescList\nProducts assert(expectTrue(valid_till_date >= issue_date, false, 'validAfterIssueDate'),\n\texpectTrue(account_status == \"Open\" || account_status == \"Closed\", false, 'accountStatusOpenClosed')) ~> Assert1\nAssert1 derive(product_name = initCap(product_name),\n\t\tproduct_type = upper(product_type),\n\t\tproduct_description = upper(product_description),\n\t\tissue_date = toDate(toString(issue_date), \"MMM-dd-yyyy\"),\n\t\tvalid_till_date = toDate(toString(valid_till_date), \"MMM-dd-yyyy\")) ~> DerivedColumn1\nDerivedColumn1 filter(isError()) ~> Filter1\nDerivedColumn1, Customers exists(Products@customer_id == Customers@customer_id,\n\tnegate:true,\n\tbroadcast: 'auto')~> CustomerIDExists\nFilter1, CustomerIDExists, NameTypeDescExists union(byName: true)~> Union1\nDerivedColumn1, ProductNameTypeDescList exists(DerivedColumn1@product_name == ProductNameTypeDescList@product_name\n\t&& DerivedColumn1@product_type == ProductNameTypeDescList@product_type\n\t&& DerivedColumn1@product_description == ProductNameTypeDescList@product_description,\n\tnegate:true,\n\tbroadcast: 'auto')~> NameTypeDescExists\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ProductsClean\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> productsErrors"
		}
	}
}