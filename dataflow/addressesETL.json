{
	"name": "addressesETL",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Addresses",
						"type": "DatasetReference"
					},
					"name": "Addresses"
				},
				{
					"dataset": {
						"referenceName": "Customers",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "CityStateCountry",
						"type": "DatasetReference"
					},
					"name": "CityStateCountry"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Addresses_clean",
						"type": "DatasetReference"
					},
					"name": "AddressesClean"
				},
				{
					"dataset": {
						"referenceName": "Errors",
						"type": "DatasetReference"
					},
					"name": "Errors"
				}
			],
			"transformations": [
				{
					"name": "AddressesValidation"
				},
				{
					"name": "AddressesTransformation"
				},
				{
					"name": "AddressesWna",
					"description": "address1, 2, 3 if NULL -> N/A"
				},
				{
					"name": "customerIDs"
				},
				{
					"name": "Filter1"
				},
				{
					"name": "Select1"
				}
			],
			"script": "source(output(\n\t\taddress_id as long,\n\t\taddress_type as string,\n\t\taddress1 as string,\n\t\taddress2 as string,\n\t\taddress3 as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tcountry as string,\n\t\tzipcode as string,\n\t\tphone as string,\n\t\temail as string,\n\t\tFax as string,\n\t\tcustomer_id as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Addresses\nsource(output(\n\t\tcustomer_id as long,\n\t\tsource_id as string,\n\t\tfirst_name as string,\n\t\tmiddle_name as string,\n\t\tlast_name as string,\n\t\tdob as timestamp,\n\t\tgender as string,\n\t\tnationality as string,\n\t\tmarital_status as string,\n\t\toccupation as string,\n\t\tavg_family_size as integer,\n\t\tincome_level as string,\n\t\tdate_onboarded as timestamp,\n\t\tcreated_date as timestamp,\n\t\tupdated_date as timestamp,\n\t\teffective_start_date as timestamp,\n\t\teffective_end_date as timestamp,\n\t\tIdentifier_type as string,\n\t\tidentifier as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdateFormats: ['MM/dd/yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy HH:mm:ss']) ~> Customers\nsource(output(\n\t\tcity as string,\n\t\tstate as string,\n\t\tcountry as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CityStateCountry\nAddressesWna, customerIDs, CityStateCountry assert(expectTrue(!isNull(address_id), false, 'addressIdNotNull', null, 'Address Id is null'),\n\texpectTrue(lower(address_type) == 'residence' || lower(address_type) == 'business', false, 'addressTypeValid', null, \"Address is not residence or business\"),\n\texpectTrue(address1 != \"\", false, 'address1NotBlank', null, 'Address1 is blank'),\n\texpectTrue(address2 != \"\", false, 'address2NotBlank', null, 'Address2 is blank'),\n\texpectTrue(address3 != \"\", false, 'address3NotBlank', null, 'Address3 is blank'),\n\texpectTrue(isInteger(zipcode), false, 'zipcodeNumeric', null, \"Zipcode is not numeric\"),\n\texpectTrue(length(toString(phone)) == 11, false, 'phoneNumberNot11digits', null, toString(phone) + \" Invalid Phone number length\"),\n\texpectTrue(regexMatch(email, `^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$`), false, 'validEmail', null, email + \" is an invalid email\"),\n\texpectTrue(length(toString(Fax)) == 11, false, 'FaxNumberNot11digits', null, toString(Fax) + \" Invalid Phone number length\"),\n\texpectExists(Addresses@city == CityStateCountry@city, false, 'cityExists', null, Addresses@city + \": is not a recognized city \"),\n\texpectExists(Addresses@state == CityStateCountry@state, false, 'stateExists', null, Addresses@state + \": is not a recognized state\"),\n\texpectExists(Addresses@country == CityStateCountry@country, false, 'countryExists', null, Addresses@country+ \": is not a recognized country\"),\n\texpectExists(Addresses@customer_id == customerIDs@customer_id, false, 'customerIDexists', null, toString(Addresses@customer_id) + \": is not a recognized customer \")) ~> AddressesValidation\nSelect1 derive(address1 = upper(address1),\n\t\taddress2 = upper(address2),\n\t\taddress3 = upper(address3),\n\t\taddress_type = initCap(address_type),\n\t\tphone = substring(phone, 1, 1) + \"-\" + substring(phone, 2, 3) + \"-\" + substring(phone, 5, 3) + \"-\" + substring(phone, 8, 4),\n\t\tFax = substring(Fax, 1, 1) + \"-\" + substring(Fax, 2, 3) + \"-\" + substring(Fax, 5, 3) + \"-\" + substring(Fax, 8, 4)) ~> AddressesTransformation\nAddresses derive(address1 = iif(isNull(address1), \"N/A\", address1),\n\t\taddress2 = iif(isNull(address2), \"N/A\", address2),\n\t\taddress3 = iif(isNull(address3), \"N/A\", address3)) ~> AddressesWna\nCustomers select(mapColumn(\n\t\tcustomer_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> customerIDs\nAddressesTransformation filter(isError()) ~> Filter1\nAddressesValidation select(mapColumn(\n\t\taddress_id,\n\t\taddress_type,\n\t\taddress1,\n\t\taddress2,\n\t\taddress3,\n\t\tcity = Addresses@city,\n\t\tstate = Addresses@state,\n\t\tcountry = Addresses@country,\n\t\tzipcode,\n\t\tphone,\n\t\temail,\n\t\tFax,\n\t\tcustomer_id = Addresses@customer_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nAddressesTransformation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcity as string,\n\t\tstate as string,\n\t\tcountry as string\n\t),\n\tpartitionFileNames:['Addresses_clean.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> AddressesClean\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tpartitionFileNames:['AddressErrors.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 0,\n\tpartitionBy('hash', 1)) ~> Errors"
		}
	}
}