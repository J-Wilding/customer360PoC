{
	"name": "generateChurn",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Customers_clean",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "Addresses_clean",
						"type": "DatasetReference"
					},
					"name": "Addresses"
				},
				{
					"dataset": {
						"referenceName": "cityStateCountry",
						"type": "DatasetReference"
					},
					"name": "cityStateCountry"
				},
				{
					"dataset": {
						"referenceName": "Products_clean",
						"type": "DatasetReference"
					},
					"name": "Products"
				},
				{
					"dataset": {
						"referenceName": "Srs_clean",
						"type": "DatasetReference"
					},
					"name": "SRS"
				},
				{
					"dataset": {
						"referenceName": "Transactions_clean",
						"type": "DatasetReference"
					},
					"name": "Transactions"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Churn",
						"type": "DatasetReference"
					},
					"name": "Churn"
				}
			],
			"transformations": [
				{
					"name": "Join1"
				},
				{
					"name": "customerIDCountry"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "customers1"
				},
				{
					"name": "customerCountries"
				},
				{
					"name": "Exists1"
				},
				{
					"name": "Join2"
				},
				{
					"name": "ProductInfo"
				},
				{
					"name": "RemoveColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "avgFeedbackScore"
				},
				{
					"name": "depositsWithdrawls"
				},
				{
					"name": "Join3"
				},
				{
					"name": "Join4"
				},
				{
					"name": "ExitedDebug"
				},
				{
					"name": "FilledNullAvgFeedback"
				}
			],
			"script": "source(output(\n\t\tcustomer_id as long,\n\t\tsource_id as string,\n\t\tfirst_name as string,\n\t\tmiddle_name as string,\n\t\tlast_name as string,\n\t\tdob as timestamp,\n\t\tgender as string,\n\t\tnationality as string,\n\t\tmarital_status as string,\n\t\toccupation as string,\n\t\tavg_family_size as integer,\n\t\tincome_level as string,\n\t\tdate_onboarded as timestamp,\n\t\tcreated_date as timestamp,\n\t\tupdated_date as timestamp,\n\t\teffective_start_date as timestamp,\n\t\teffective_end_date as timestamp,\n\t\tIdentifier_type as string,\n\t\tidentifier as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> Customers\nsource(output(\n\t\taddress_id as long,\n\t\taddress_type as string,\n\t\taddress1 as string,\n\t\taddress2 as string,\n\t\taddress3 as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tcountry as string,\n\t\tzipcode as string,\n\t\tphone as string,\n\t\temail as string,\n\t\tFax as string,\n\t\tcustomer_id as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> Addresses\nsource(output(\n\t\tCity as string,\n\t\tState as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> cityStateCountry\nsource(output(\n\t\tproduct_id as long,\n\t\tproduct_name as string,\n\t\tproduct_type as string,\n\t\tproduct_description as string,\n\t\tissue_date as string,\n\t\tvalid_till_date as string,\n\t\taccount_status as string,\n\t\tcredit_card_limit as long,\n\t\tinterest_rate as double,\n\t\ttenure as long,\n\t\tservice_charges as long,\n\t\tcustomer_id as long,\n\t\tfd_principal_amount as long,\n\t\tloan_collateral_value as long,\n\t\tloan_amount as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> Products\nsource(output(\n\t\tsr_id as long,\n\t\tcustomer_id as long,\n\t\tproduct_id as long,\n\t\tsr_description as string,\n\t\tsr_open_date as timestamp,\n\t\tsr_close_date as timestamp,\n\t\tsr_type as string,\n\t\tchannel as string,\n\t\tsr_cust_feedback as string,\n\t\tfeedback_type as string,\n\t\tfeedback_severity as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> SRS\nsource(output(\n\t\ttransaction_id as long,\n\t\tcustomer_id as long,\n\t\tproduct_id as long,\n\t\tmerchant_name as string,\n\t\ttransaction_description as string,\n\t\ttransaction_amount as long,\n\t\ttype_deposit_withdrawal as string,\n\t\ttransaction_date as timestamp,\n\t\tchannel as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> Transactions\ncustomers1, customerCountries join(customers1@customer_id == customerCountries@customer_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tcustomer_id = customers1@customer_id,\n\t\tstate,\n\t\tcountry,\n\t\tage = dob,\n\t\tgender\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> customerIDCountry\nJoin2 derive(credit_score = toInteger(random(1)*215 + 600),\n\t\tage = toInteger(monthsBetween(currentTimestamp(), age) / 12),\n\t\thas_credit_card = iif(has_credit_card > 0, true(), false())) ~> DerivedColumn1\nCustomers aggregate(groupBy(customer_id,\n\t\tdob,\n\t\tgender),\n\tcount = count()) ~> customers1\nExists1 aggregate(groupBy(customer_id,\n\t\tcountry,\n\t\tstate),\n\tcount = count()) ~> customerCountries\nAddresses, cityStateCountry exists(Addresses@country == cityStateCountry@Country,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists1\ncustomerIDCountry, ProductInfo join(customerIDCountry@customer_id == ProductInfo@customer_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nProducts aggregate(groupBy(customer_id),\n\ttenure = sum(tenure),\n\t\tnumber_of_products = count(),\n\t\thas_credit_card = countIf(product_type == \"CREDIT CARD\" && account_status == \"open\", customer_id),\n\t\tis_active = iif(countIf(account_status == \"closed\") == count(), false(), true()),\n\t\texited = !iif(countIf(account_status == \"closed\") == count(), false(), true())) ~> ProductInfo\nJoin4 select(mapColumn(\n\t\tcustomer_id = customerIDCountry@customer_id,\n\t\tcredit_score,\n\t\tstate,\n\t\tcountry,\n\t\tgender,\n\t\tage,\n\t\ttenure,\n\t\tdeposits,\n\t\twithdrawls,\n\t\tnumber_of_products,\n\t\thas_credit_card,\n\t\tavg_feedback_score,\n\t\tis_active,\n\t\texited\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns1\nSRS aggregate(groupBy(customer_id),\n\tavg_feedback_score = countIf(feedback_type == \"Positive\") / iif(countIf(feedback_type == \"Negative\") == 0, 1l, countIf(feedback_type == \"Negative\")),\n\t\tpositive = countIf(feedback_type == \"Positive\"),\n\t\tnegative = countIf(feedback_type == \"Negative\")) ~> avgFeedbackScore\nTransactions aggregate(groupBy(customer_id),\n\tdeposits = iifNull(sumIf(type_deposit_withdrawal == \"D\", transaction_amount), 0),\n\t\twithdrawls = iifNull(sumIf(type_deposit_withdrawal == \"W\", transaction_amount), 0)) ~> depositsWithdrawls\navgFeedbackScore, depositsWithdrawls join(avgFeedbackScore@customer_id == depositsWithdrawls@customer_id,\n\tjoinType:'right',\n\tbroadcast: 'auto')~> Join3\nDerivedColumn1, FilledNullAvgFeedback join(customerIDCountry@customer_id == depositsWithdrawls@customer_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join4\nRemoveColumns1 filter(customer_id == 14 || customer_id == 888 || customer_id == 738 || customer_id == 277) ~> ExitedDebug\nJoin3 derive(avg_feedback_score = iifNull(avg_feedback_score, 0)) ~> FilledNullAvgFeedback\nRemoveColumns1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcustomer_id as long,\n\t\tcredit_score as integer,\n\t\tcountry as string,\n\t\tgender as string,\n\t\tage as integer,\n\t\ttenure as long,\n\t\tdeposits as long,\n\t\twithdrawls as long,\n\t\tnumber_of_products as long,\n\t\thas_credit_card as boolean,\n\t\tavg_feedback_score as double,\n\t\tis_active as boolean,\n\t\texited as boolean\n\t),\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1) ~> Churn"
		}
	}
}