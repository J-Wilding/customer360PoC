{
	"name": "transactionsETL",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "customerIDs",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "Transactions",
						"type": "DatasetReference"
					},
					"name": "Transactions"
				},
				{
					"dataset": {
						"referenceName": "productIDs",
						"type": "DatasetReference"
					},
					"name": "productIDs"
				},
				{
					"dataset": {
						"referenceName": "merchantNames",
						"type": "DatasetReference"
					},
					"name": "merchants"
				},
				{
					"dataset": {
						"referenceName": "channels",
						"type": "DatasetReference"
					},
					"name": "channels"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "pTransactions_clean",
						"type": "DatasetReference"
					},
					"name": "TransactionsClean"
				},
				{
					"dataset": {
						"referenceName": "pTransactionsErrors",
						"type": "DatasetReference"
					},
					"name": "transactionsErrors"
				}
			],
			"transformations": [
				{
					"name": "Assert1"
				},
				{
					"name": "Filter1"
				},
				{
					"name": "customerIDExists"
				},
				{
					"name": "productIDExists"
				},
				{
					"name": "merchantExists"
				},
				{
					"name": "channelExists"
				},
				{
					"name": "Union1"
				}
			],
			"script": "source(output(\n\t\tcustomer_id as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tdateFormats: ['MM/dd/yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy HH:mm:ss']) ~> Customers\nsource(output(\n\t\ttransaction_id as long,\n\t\tcustomer_id as long,\n\t\tproduct_id as long,\n\t\tmerchant_name as string,\n\t\ttransaction_description as string,\n\t\ttransaction_amount as long,\n\t\ttype_deposit_withdrawal as string,\n\t\ttransaction_date as timestamp,\n\t\tchannel as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tdateFormats: ['yyyy/MM/dd']) ~> Transactions\nsource(output(\n\t\tproduct_id as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> productIDs\nsource(output(\n\t\tmerchant_name as string,\n\t\tcount as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> merchants\nsource(output(\n\t\tchannel as string,\n\t\tcount as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> channels\nTransactions assert(expectTrue(!isNull(transaction_id) && isInteger(toString(transaction_id)), false, 'srIDNotNull'),\n\texpectTrue(!isNull(transaction_amount) && isInteger(toString(transaction_amount)), false, 'transactionAmt'),\n\texpectTrue(type_deposit_withdrawal == \"D\" || type_deposit_withdrawal == \"W\", false, 'validType')) ~> Assert1\nAssert1 filter(isError()) ~> Filter1\nAssert1, Customers exists(Transactions@customer_id == Customers@customer_id,\n\tnegate:true,\n\tbroadcast: 'auto')~> customerIDExists\nAssert1, productIDs exists(Transactions@product_id == productIDs@product_id,\n\tnegate:true,\n\tbroadcast: 'auto')~> productIDExists\nAssert1, merchants exists(Transactions@merchant_name == merchants@merchant_name,\n\tnegate:true,\n\tbroadcast: 'auto')~> merchantExists\nAssert1, channels exists(Transactions@channel == channels@channel,\n\tnegate:true,\n\tbroadcast: 'auto')~> channelExists\nFilter1, productIDExists, channelExists, customerIDExists, merchantExists union(byName: true)~> Union1\nAssert1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TransactionsClean\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> transactionsErrors"
		}
	}
}