{
	"name": "customerETL",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "cCustomers",
						"type": "DatasetReference"
					},
					"name": "Customers"
				}
			],
			"sinks": [
				{
					"name": "CustomersClean"
				},
				{
					"name": "CustomersErrors"
				}
			],
			"transformations": [
				{
					"name": "ValidatedCustomers"
				},
				{
					"name": "customersTransformed"
				},
				{
					"name": "hasErrors"
				}
			],
			"script": "source(output(\n\t\tcustomer_id as long,\n\t\tsource_id as string,\n\t\tfirst_name as string,\n\t\tmiddle_name as string,\n\t\tlast_name as string,\n\t\tdob as date,\n\t\tgender as string,\n\t\tnationality as string,\n\t\tmarital_status as string,\n\t\toccupation as string,\n\t\tavg_family_size as integer,\n\t\tincome_level as string,\n\t\tdate_onboarded as date,\n\t\tcreated_date as date,\n\t\tupdated_date as date,\n\t\teffective_start_date as date,\n\t\teffective_end_date as date,\n\t\tIdentifier_type as string,\n\t\tidentifier as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdateFormats: ['MM/dd/yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy HH:mm:ss']) ~> Customers\nCustomers assert(expectTrue(!isNull(customer_id), false, 'custIDNotNull', null, \"Customer Id may not be null\"),\n\texpectTrue(upper(source_id) == \"ERP\", false, 'sourceIDERP', null, source_id + \" is an invalid source id -- must be ERP\"),\n\texpectTrue(first_name != \"\", false, 'firstNameNotBlank', null, toString(customer_id) + \": First Name must not be blank\"),\n\texpectTrue(last_name != \"\", false, 'lastNameNotBlank', null, toString(customer_id) + \": Last name is blank\"),\n\texpectTrue(gender == \"Male\" || gender == \"Female\", false, 'maleOrFemale', null, gender + \": is not a valid gender\"),\n\texpectTrue(marital_status == \"Married\" || marital_status == \"Single\", false, 'maritalStatus', null, marital_status + \": is not a valid marital status\"),\n\texpectTrue(avg_family_size > 0, false, 'avgFamilyNot0', null, toString(avg_family_size) + \": is an invalid family size. Must be numeric and cannot be 0.\"),\n\texpectTrue(income_level == \"Low\" || income_level == \"Medium\" || income_level == \"High\", false, 'incomeLevelValid', null, income_level + \": is invalid income level. Must be Low-Medium-High\"),\n\texpectTrue(length(identifier) == 11, false, 'identifierLength11', null, identifier + \": is invalid identifier. Must be 11 characters long.\")) ~> ValidatedCustomers\nValidatedCustomers derive(source_id = upper(source_id),\n\t\tfirst_name = upper(first_name),\n\t\tmiddle_name = upper(middle_name),\n\t\tlast_name = upper(last_name)) ~> customersTransformed\ncustomersTransformed filter(isError()) ~> hasErrors\ncustomersTransformed sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpreCommands: [],\n\tpostCommands: []) ~> CustomersClean\nhasErrors sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['customersErrors.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1),\n\tpreCommands: [],\n\tpostCommands: []) ~> CustomersErrors"
		}
	}
}