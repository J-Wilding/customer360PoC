{
	"name": "srsETL",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "customerIDs",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "SRS",
						"type": "DatasetReference"
					},
					"name": "SRS"
				},
				{
					"dataset": {
						"referenceName": "srTypes",
						"type": "DatasetReference"
					},
					"name": "srTypes"
				},
				{
					"dataset": {
						"referenceName": "productIDs",
						"type": "DatasetReference"
					},
					"name": "productIDs"
				},
				{
					"dataset": {
						"referenceName": "channels",
						"type": "DatasetReference"
					},
					"name": "channels"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Srs_clean",
						"type": "DatasetReference"
					},
					"name": "SrsClean"
				},
				{
					"dataset": {
						"referenceName": "pSrsErrors",
						"type": "DatasetReference"
					},
					"name": "srsErrors"
				}
			],
			"transformations": [
				{
					"name": "Asserts"
				},
				{
					"name": "Filter1"
				},
				{
					"name": "Union"
				},
				{
					"name": "custIDExists"
				},
				{
					"name": "prodIDExists"
				},
				{
					"name": "srTypeExists"
				},
				{
					"name": "channelExists"
				},
				{
					"name": "DerivedColumn1"
				}
			],
			"script": "source(output(\n\t\tcustomer_id as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tdateFormats: ['MM/dd/yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy HH:mm:ss']) ~> Customers\nsource(output(\n\t\tsr_id as long,\n\t\tcustomer_id as long,\n\t\tproduct_id as long,\n\t\tsr_description as string,\n\t\tsr_open_date as timestamp,\n\t\tsr_close_date as timestamp,\n\t\tsr_type as string,\n\t\tchannel as string,\n\t\tsr_cust_feedback as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tdateFormats: ['yyyy/MM/dd']) ~> SRS\nsource(output(\n\t\tsr_type as string,\n\t\tcount as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srTypes\nsource(output(\n\t\tproduct_id as long,\n\t\tcount as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> productIDs\nsource(output(\n\t\tchannel as string,\n\t\tcount as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> channels\nDerivedColumn1 assert(expectTrue(!isNull(sr_id), false, 'srIDNotNull'),\n\texpectTrue(length(sr_description) > 0 && length(sr_description) <= 100, false, 'descriptionLength'),\n\texpectTrue(sr_close_date >= sr_open_date, false, 'validCloseDate'),\n\texpectTrue(length(sr_cust_feedback) > 0 && length(sr_cust_feedback) <= 100, false, 'custFeedbackLength')) ~> Asserts\nAsserts filter(isError()) ~> Filter1\nFilter1, custIDExists, prodIDExists, srTypeExists, channelExists union(byName: true)~> Union\nAsserts, Customers exists(SRS@customer_id == Customers@customer_id,\n\tnegate:true,\n\tbroadcast: 'auto')~> custIDExists\nAsserts, productIDs exists(SRS@product_id == productIDs@product_id,\n\tnegate:true,\n\tbroadcast: 'auto')~> prodIDExists\nAsserts, srTypes exists(SRS@sr_type == srTypes@sr_type,\n\tnegate:true,\n\tbroadcast: 'auto')~> srTypeExists\nAsserts, channels exists(SRS@channel == channels@channel,\n\tnegate:true,\n\tbroadcast: 'auto')~> channelExists\nSRS derive(feedback_type = iif(\r\n    reduce(split(sr_cust_feedback, \" \"), false(), #acc || in([\"fantastic\", \"great\", \"satisfied\", \"satisfactory\", \"satisfaction\", \"happy\", \"serve\", \"served\", \"serving\", \"timely\", \"prompt\"], lower(#item)), #result),\r\n    \"Positive\",\r\n    \"Negative\"\r\n    ),\n\t\tfeedback_severity = case(    \r\n    reduce(\r\n        split(sr_cust_feedback, \" \"), \r\n        false(), \r\n        #acc || in([\"should\", \"interest\", \"quicker\", \"quick\", \"switch\", \"switching\", \"bank\", \"need\", \"needs\", \"horrible\", \"terrible\", \"bad\", \"unhappy\", \"about\" ,\"very\"], lower(#item)), \r\n        #result\r\n        ),    \r\n    \"High\",    \r\n    case(\r\n        reduce(\r\n            split(sr_cust_feedback, \" \"), \r\n            false(), \r\n            #acc || in([\"timely\", \"higher\", \"high\", \"prompt\", \"committed\", \"improve\", \"improved\"], lower(#item)), \r\n            #result\r\n            ),    \r\n    \"Medium\",\r\n    \"Low\"\r\n    )   \r\n)) ~> DerivedColumn1\nAsserts sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SrsClean\nUnion sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> srsErrors"
		}
	}
}