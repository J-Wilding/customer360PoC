{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "wilding360DF"
		},
		"wilding360PoC_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'wilding360PoC'"
		},
		"wilding360datalake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'wilding360datalake'"
		},
		"wilding360datalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://wilding360datalake.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/wilding360PoC')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-8335868949914870.10.azuredatabricks.net",
					"clusterId": "1120-015936-tp7ks379",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('wilding360PoC_accessToken')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/wilding360datalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('wilding360datalake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('wilding360datalake_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Addresses')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Raw"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "address.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "address_id",
						"type": "String"
					},
					{
						"name": "address_type",
						"type": "String"
					},
					{
						"name": "address1",
						"type": "String"
					},
					{
						"name": "address2",
						"type": "String"
					},
					{
						"name": "address3",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "zipcode",
						"type": "String"
					},
					{
						"name": "phone",
						"type": "String"
					},
					{
						"name": "email",
						"type": "String"
					},
					{
						"name": "Fax",
						"type": "String"
					},
					{
						"name": "customer_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/wilding360datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Addresses_clean')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Clean"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "clean"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/wilding360datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CityStateCountry')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "CityStateCountry.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/wilding360datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Raw"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "source_id",
						"type": "String"
					},
					{
						"name": "first_name",
						"type": "String"
					},
					{
						"name": "middle_name",
						"type": "String"
					},
					{
						"name": "last_name",
						"type": "String"
					},
					{
						"name": "dob",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "nationality",
						"type": "String"
					},
					{
						"name": "marital_status",
						"type": "String"
					},
					{
						"name": "occupation",
						"type": "String"
					},
					{
						"name": "avg_family_size",
						"type": "String"
					},
					{
						"name": "income_level",
						"type": "String"
					},
					{
						"name": "date_onboarded",
						"type": "String"
					},
					{
						"name": "created_date",
						"type": "String"
					},
					{
						"name": "updated_date",
						"type": "String"
					},
					{
						"name": "effective_start_date",
						"type": "String"
					},
					{
						"name": "effective_end_date",
						"type": "String"
					},
					{
						"name": "Identifier_type",
						"type": "String"
					},
					{
						"name": "identifier",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/wilding360datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customers_clean')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Clean"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "clean"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/wilding360datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Errors')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "errors"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/wilding360datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Raw"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "products.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "product_name",
						"type": "String"
					},
					{
						"name": "product_type",
						"type": "String"
					},
					{
						"name": "product_description",
						"type": "String"
					},
					{
						"name": "issue_date",
						"type": "String"
					},
					{
						"name": "valid_till_date",
						"type": "String"
					},
					{
						"name": "account_status",
						"type": "String"
					},
					{
						"name": "credit_card_limit",
						"type": "String"
					},
					{
						"name": "interest_rate",
						"type": "String"
					},
					{
						"name": "tenure",
						"type": "String"
					},
					{
						"name": "service_charges",
						"type": "String"
					},
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "fd_principal_amount",
						"type": "String"
					},
					{
						"name": "loan_collateral_value",
						"type": "String"
					},
					{
						"name": "loan_amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/wilding360datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Raw"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "srs.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "sr_id",
						"type": "String"
					},
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "sr_description",
						"type": "String"
					},
					{
						"name": "sr_open_date",
						"type": "String"
					},
					{
						"name": "sr_close_date",
						"type": "String"
					},
					{
						"name": "sr_type",
						"type": "String"
					},
					{
						"name": "channel",
						"type": "String"
					},
					{
						"name": "sr_cust_feedback",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/wilding360datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Transactions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Raw"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "transactions.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "transaction_id",
						"type": "String"
					},
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "merchant_name",
						"type": "String"
					},
					{
						"name": "transaction_description",
						"type": "String"
					},
					{
						"name": "transaction_amount",
						"type": "String"
					},
					{
						"name": "type_deposit_withdrawal",
						"type": "String"
					},
					{
						"name": "transaction_date",
						"type": "String"
					},
					{
						"name": "channel",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/wilding360datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Clean"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/wilding360datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer360_ETL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Addresses",
								"type": "DatasetReference"
							},
							"name": "Addresses"
						},
						{
							"dataset": {
								"referenceName": "CityStateCountry",
								"type": "DatasetReference"
							},
							"name": "CityStateCountry"
						},
						{
							"dataset": {
								"referenceName": "Customers",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "Products",
								"type": "DatasetReference"
							},
							"name": "Products"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Addresses_clean",
								"type": "DatasetReference"
							},
							"name": "AddressesClean"
						},
						{
							"dataset": {
								"referenceName": "Customers_clean",
								"type": "DatasetReference"
							},
							"name": "CustomersClean"
						},
						{
							"dataset": {
								"referenceName": "Errors",
								"type": "DatasetReference"
							},
							"name": "Errors"
						},
						{
							"dataset": {
								"referenceName": "Customers_clean",
								"type": "DatasetReference"
							},
							"name": "ProductsClean"
						}
					],
					"transformations": [
						{
							"name": "AddressesValidation"
						},
						{
							"name": "AddressesTransformation"
						},
						{
							"name": "FillNullAddressWithNA",
							"description": "address1, 2, 3 if NULL -> N/A"
						},
						{
							"name": "customerIDs"
						},
						{
							"name": "ValidatedCustomers"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Assert1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Exists1"
						},
						{
							"name": "Exists2"
						}
					],
					"script": "source(output(\n\t\taddress_id as long,\n\t\taddress_type as string,\n\t\taddress1 as string,\n\t\taddress2 as string,\n\t\taddress3 as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tcountry as string,\n\t\tzipcode as string,\n\t\tphone as string,\n\t\temail as string,\n\t\tFax as string,\n\t\tcustomer_id as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Addresses\nsource(output(\n\t\tcity as string,\n\t\tstate as string,\n\t\tcountry as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> CityStateCountry\nsource(output(\n\t\tcustomer_id as long,\n\t\tsource_id as string,\n\t\tfirst_name as string,\n\t\tmiddle_name as string,\n\t\tlast_name as string,\n\t\tdob as timestamp,\n\t\tgender as string,\n\t\tnationality as string,\n\t\tmarital_status as string,\n\t\toccupation as string,\n\t\tavg_family_size as integer,\n\t\tincome_level as string,\n\t\tdate_onboarded as timestamp,\n\t\tcreated_date as timestamp,\n\t\tupdated_date as timestamp,\n\t\teffective_start_date as timestamp,\n\t\teffective_end_date as timestamp,\n\t\tIdentifier_type as string,\n\t\tidentifier as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdateFormats: ['MM/dd/yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy HH:mm:ss']) ~> Customers\nsource(output(\n\t\tproduct_id as long,\n\t\tproduct_name as string,\n\t\tproduct_type as string,\n\t\tproduct_description as string,\n\t\tissue_date as date,\n\t\tvalid_till_date as date,\n\t\taccount_status as string,\n\t\tcredit_card_limit as long,\n\t\tinterest_rate as double,\n\t\ttenure as long,\n\t\tservice_charges as string,\n\t\tcustomer_id as long,\n\t\tfd_principal_amount as long,\n\t\tloan_collateral_value as long,\n\t\tloan_amount as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdateFormats: ['yyyy/MM/dd']) ~> Products\nExists2 assert(expectTrue(!isNull(address_id), false, 'addressIdNotNull', null, 'Address Id is null'),\n\texpectTrue(lower(address_type) == 'residence' || lower(address_type) == 'business', false, 'addressTypeValid', null, \"Address is not residence or business\"),\n\texpectTrue(address1 != \"\", false, 'address1NotBlank', null, 'Address1 is blank'),\n\texpectTrue(address2 != \"\", false, 'address2NotBlank', null, 'Address2 is blank'),\n\texpectTrue(address3 != \"\", false, 'address3NotBlank', null, 'Address3 is blank'),\n\texpectTrue(isInteger(zipcode), false, 'zipcodeNumeric', null, \"Zipcode is not numeric\"),\n\texpectTrue(length(toString(phone)) == 11, false, 'phoneNumberNot11digits', null, toString(phone) + \" Invalid Phone number length\"),\n\texpectTrue(regexMatch(email, `^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$`), false, 'validEmail', null, email + \" is an invalid email\"),\n\texpectTrue(length(toString(Fax)) == 11, false, 'FaxNumberNot11digits', null, toString(Fax) + \" Invalid Phone number length\")) ~> AddressesValidation\nAddressesValidation derive(address1 = upper(address1),\n\t\taddress2 = upper(address2),\n\t\taddress3 = upper(address3),\n\t\taddress_type = initCap(address_type),\n\t\tphone = substring(phone, 1, 1) + \"-\" + substring(phone, 2, 3) + \"-\" + substring(phone, 5, 3) + \"-\" + substring(phone, 8, 4),\n\t\tFax = substring(Fax, 1, 1) + \"-\" + substring(Fax, 2, 3) + \"-\" + substring(Fax, 5, 3) + \"-\" + substring(Fax, 8, 4)) ~> AddressesTransformation\nAddresses derive(address1 = iif(isNull(address1), \"N/A\", address1),\n\t\taddress2 = iif(isNull(address2), \"N/A\", address2),\n\t\taddress3 = iif(isNull(address3), \"N/A\", address3)) ~> FillNullAddressWithNA\nCustomers select(mapColumn(\n\t\tcustomer_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> customerIDs\nCustomers assert(expectTrue(!isNull(customer_id), false, 'custIDNotNull', null, \"Customer Id may not be null\"),\n\texpectTrue(upper(source_id) == \"ERP\", false, 'sourceIDERP', null, source_id + \" is an invalid source id -- must be ERP\"),\n\texpectTrue(first_name != \"\", false, 'firstNameNotBlank', null, toString(customer_id) + \": First Name must not be blank\"),\n\texpectTrue(last_name != \"\", false, 'lastNameNotBlank', null, toString(customer_id) + \": Last name is blank\"),\n\texpectTrue(gender == \"Male\" || gender == \"Female\", false, 'maleOrFemale', null, gender + \": is not a valid gender\"),\n\texpectTrue(marital_status == \"Married\" || marital_status == \"Single\", false, 'maritalStatus', null, marital_status + \": is not a valid marital status\"),\n\texpectTrue(avg_family_size > 0, false, 'avgFamilyNot0', null, toString(avg_family_size) + \": is an invalid family size. Must be numeric and cannot be 0.\"),\n\texpectTrue(income_level == \"Low\" || income_level == \"Medium\" || income_level == \"High\", false, 'incomeLevelValid', null, income_level + \": is invalid income level. Must be Low-Medium-High\"),\n\texpectTrue(length(identifier) == 11, false, 'identifierLength11', null, identifier + \": is invalid identifier. Must be 11 characters long.\")) ~> ValidatedCustomers\nValidatedCustomers derive(source_id = upper(source_id),\n\t\tfirst_name = upper(first_name),\n\t\tmiddle_name = upper(middle_name),\n\t\tlast_name = upper(last_name)) ~> DerivedColumn1\nProducts, customerIDs assert(expectExists(Products@customer_id == customerIDs@customer_id, false, 'customerIDExists', null, toString(Products@customer_id) + \": is not a valid customer id\")) ~> Assert1\nAddressesTransformation filter(isError()) ~> Filter1\nFillNullAddressWithNA, CityStateCountry exists(Addresses@city == CityStateCountry@city,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists1\nExists1, customerIDs exists(customerIDs@customer_id == customerIDs@customer_id,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists2\nAddressesTransformation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcity as string,\n\t\tstate as string,\n\t\tcountry as string\n\t),\n\tpartitionFileNames:['Addresses_clean.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> AddressesClean\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string\n\t),\n\tpartitionFileNames:['Customers_clean.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> CustomersClean\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tpartitionFileNames:['AddressErrors.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\tpartitionBy('hash', 1)) ~> Errors\nAssert1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string\n\t),\n\tpartitionFileNames:['Products_clean.csv'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> ProductsClean"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Addresses')]",
				"[concat(variables('factoryId'), '/datasets/CityStateCountry')]",
				"[concat(variables('factoryId'), '/datasets/Customers')]",
				"[concat(variables('factoryId'), '/datasets/Products')]",
				"[concat(variables('factoryId'), '/datasets/Addresses_clean')]",
				"[concat(variables('factoryId'), '/datasets/Customers_clean')]",
				"[concat(variables('factoryId'), '/datasets/Errors')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customer360_PoC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "customer360_ETL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "customer360_ETL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Addresses": {},
									"CityStateCountry": {},
									"Customers": {},
									"Products": {},
									"AddressesClean": {},
									"CustomersClean": {},
									"Errors": {},
									"ProductsClean": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-07T21:36:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/customer360_ETL')]"
			]
		}
	]
}