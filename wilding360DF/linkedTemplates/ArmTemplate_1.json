{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "wilding360DF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Transactions_errors')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Errors"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "transactions",
						"fileSystem": "errors"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cAddresses')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Raw/csv"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "address.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "address_id",
						"type": "String"
					},
					{
						"name": "address_type",
						"type": "String"
					},
					{
						"name": "address1",
						"type": "String"
					},
					{
						"name": "address2",
						"type": "String"
					},
					{
						"name": "address3",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "zipcode",
						"type": "String"
					},
					{
						"name": "phone",
						"type": "String"
					},
					{
						"name": "email",
						"type": "String"
					},
					{
						"name": "Fax",
						"type": "String"
					},
					{
						"name": "customer_id",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cCityStateCountry')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Raw/csv"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "CityStateCountry.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "city",
						"type": "String"
					},
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cCustomers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Raw/csv"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "source_id",
						"type": "String"
					},
					{
						"name": "first_name",
						"type": "String"
					},
					{
						"name": "middle_name",
						"type": "String"
					},
					{
						"name": "last_name",
						"type": "String"
					},
					{
						"name": "dob",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					},
					{
						"name": "nationality",
						"type": "String"
					},
					{
						"name": "marital_status",
						"type": "String"
					},
					{
						"name": "occupation",
						"type": "String"
					},
					{
						"name": "avg_family_size",
						"type": "String"
					},
					{
						"name": "income_level",
						"type": "String"
					},
					{
						"name": "date_onboarded",
						"type": "String"
					},
					{
						"name": "created_date",
						"type": "String"
					},
					{
						"name": "updated_date",
						"type": "String"
					},
					{
						"name": "effective_start_date",
						"type": "String"
					},
					{
						"name": "effective_end_date",
						"type": "String"
					},
					{
						"name": "Identifier_type",
						"type": "String"
					},
					{
						"name": "identifier",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cProducts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Raw/csv"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "products.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "product_name",
						"type": "String"
					},
					{
						"name": "product_type",
						"type": "String"
					},
					{
						"name": "product_description",
						"type": "String"
					},
					{
						"name": "issue_date",
						"type": "String"
					},
					{
						"name": "valid_till_date",
						"type": "String"
					},
					{
						"name": "account_status",
						"type": "String"
					},
					{
						"name": "credit_card_limit",
						"type": "String"
					},
					{
						"name": "interest_rate",
						"type": "String"
					},
					{
						"name": "tenure",
						"type": "String"
					},
					{
						"name": "service_charges",
						"type": "String"
					},
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "fd_principal_amount",
						"type": "String"
					},
					{
						"name": "loan_collateral_value",
						"type": "String"
					},
					{
						"name": "loan_amount",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cSRS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Raw/csv"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "srs.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "sr_id",
						"type": "String"
					},
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "sr_description",
						"type": "String"
					},
					{
						"name": "sr_open_date",
						"type": "String"
					},
					{
						"name": "sr_close_date",
						"type": "String"
					},
					{
						"name": "sr_type",
						"type": "String"
					},
					{
						"name": "channel",
						"type": "String"
					},
					{
						"name": "sr_cust_feedback",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cTransactions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Raw/csv"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "transactions.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "transaction_id",
						"type": "String"
					},
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "product_id",
						"type": "String"
					},
					{
						"name": "merchant_name",
						"type": "String"
					},
					{
						"name": "transaction_description",
						"type": "String"
					},
					{
						"name": "transaction_amount",
						"type": "String"
					},
					{
						"name": "type_deposit_withdrawal",
						"type": "String"
					},
					{
						"name": "transaction_date",
						"type": "String"
					},
					{
						"name": "channel",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/channels')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Auxiliary Tables"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "channels",
						"fileSystem": "auxiliary-tables"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "channel",
						"type": "UTF8"
					},
					{
						"name": "count",
						"type": "INT64"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cityStateCountry')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Auxiliary Tables"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "cityStateCountry",
						"fileSystem": "auxiliary-tables"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "City",
						"type": "UTF8"
					},
					{
						"name": "State",
						"type": "UTF8"
					},
					{
						"name": "Country",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/customerIDs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Auxiliary Tables"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "customerIDs",
						"fileSystem": "auxiliary-tables"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "INT64"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/merchantNames')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Auxiliary Tables"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "merchants",
						"fileSystem": "auxiliary-tables"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "merchant_name",
						"type": "UTF8"
					},
					{
						"name": "count",
						"type": "INT64"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/occupations')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Auxiliary Tables"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "occupations",
						"fileSystem": "auxiliary-tables"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "occupation",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/productIDs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Auxiliary Tables"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "productIDs",
						"fileSystem": "auxiliary-tables"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "product_id",
						"type": "INT64"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/productNameTypeDesc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Auxiliary Tables"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "productNames",
						"fileSystem": "auxiliary-tables"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "product_name",
						"type": "UTF8"
					},
					{
						"name": "product_type",
						"type": "UTF8"
					},
					{
						"name": "product_description",
						"type": "UTF8"
					},
					{
						"name": "count",
						"type": "INT64"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/srTypes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wilding360datalake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Auxiliary Tables"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "srTypes",
						"fileSystem": "auxiliary-tables"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "sr_type",
						"type": "UTF8"
					},
					{
						"name": "count",
						"type": "INT64"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cpCSVtoParquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Transactions",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Customers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "transaction_id",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "customer_id",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "customer_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "product_id",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "product_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "merchant_name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "merchant_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "transaction_description",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "transaction_description",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "transaction_amount",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "transaction_amount",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "type_deposit_withdrawal",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "type_deposit_withdrawal",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "transaction_date",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "channel",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "channel",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "cTransactions",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Transactions",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Addresses",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "address_id",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "address_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address_type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "address_type",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address1",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "address1",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "address2",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address3",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "address3",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "city",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "city",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "state",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "state",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "country",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "zipcode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "zipcode",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "phone",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "phone",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "email",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Fax",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Fax",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "customer_id",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "customer_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "cAddresses",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Addresses",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Customers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Addresses",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "customer_id",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "customer_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "source_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "source_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "first_name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "first_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "middle_name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "middle_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "last_name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "last_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "dob",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "dob",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "gender",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "gender",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "nationality",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "nationality",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "marital_status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "marital_status",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "occupation",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "occupation",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "avg_family_size",
											"type": "Int16",
											"physicalType": "String"
										},
										"sink": {
											"name": "avg_family_size",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "income_level",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "income_level",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "date_onboarded",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "date_onboarded",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "created_date",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "created_date",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "updated_date",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "updated_date",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "effective_start_date",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "effective_start_date",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "effective_end_date",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "effective_end_date",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Identifier_type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Identifier_type",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "identifier",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "identifier",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "cCustomers",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Customers",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Products",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Transactions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "product_id",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "product_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "product_name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "product_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "product_type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "product_type",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "product_description",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "product_description",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "issue_date",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "issue_date",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "valid_till_date",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "valid_till_date",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "account_status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "account_status",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "credit_card_limit",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "credit_card_limit",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "interest_rate",
											"type": "Double",
											"physicalType": "String"
										},
										"sink": {
											"name": "interest_rate",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "tenure",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "tenure",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "service_charges",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "service_charges",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "customer_id",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "customer_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "fd_principal_amount",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "fd_principal_amount",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "loan_collateral_value",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "loan_collateral_value",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "loan_amount",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "loan_amount",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "cProducts",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Products",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy SRS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Products",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "sr_id",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "sr_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "customer_id",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "customer_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "product_id",
											"type": "Int64",
											"physicalType": "String"
										},
										"sink": {
											"name": "product_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sr_description",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "sr_description",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sr_open_date",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "sr_open_date",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sr_close_date",
											"type": "DateTime",
											"physicalType": "String"
										},
										"sink": {
											"name": "sr_close_date",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sr_type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "sr_type",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "channel",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "channel",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sr_cust_feedback",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "sr_cust_feedback",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "cSRS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SRS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/cTransactions')]",
				"[concat(variables('factoryId'), '/datasets/cAddresses')]",
				"[concat(variables('factoryId'), '/datasets/cCustomers')]",
				"[concat(variables('factoryId'), '/datasets/cProducts')]",
				"[concat(variables('factoryId'), '/datasets/cSRS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/addressesETL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Addresses",
								"type": "DatasetReference"
							},
							"name": "Addresses"
						},
						{
							"dataset": {
								"referenceName": "customerIDs",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "cityStateCountry",
								"type": "DatasetReference"
							},
							"name": "CityStateCountry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Addresses_clean",
								"type": "DatasetReference"
							},
							"name": "AddressesClean"
						},
						{
							"dataset": {
								"referenceName": "Addresses_errors",
								"type": "DatasetReference"
							},
							"name": "addressesErrors",
							"description": "Gathered Addresses with errors, if an address fails exists checks it may appear more than once"
						}
					],
					"transformations": [
						{
							"name": "AddressesValidation"
						},
						{
							"name": "AddressesTransformation"
						},
						{
							"name": "AddressesWna",
							"description": "address1, 2, 3 if NULL -> N/A"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "CustomerIDExists"
						},
						{
							"name": "Union1"
						},
						{
							"name": "CityStateCountryExists"
						}
					],
					"script": "source(output(\n\t\taddress_id as long,\n\t\taddress_type as string,\n\t\taddress1 as string,\n\t\taddress2 as string,\n\t\taddress3 as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tcountry as string,\n\t\tzipcode as string,\n\t\tphone as string,\n\t\temail as string,\n\t\tFax as string,\n\t\tcustomer_id as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> Addresses\nsource(output(\n\t\tcustomer_id as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tdateFormats: ['MM/dd/yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy HH:mm:ss']) ~> Customers\nsource(output(\n\t\tCity as string,\n\t\tState as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> CityStateCountry\nAddressesWna assert(expectTrue(!isNull(address_id), false, 'addressIdNotNull', null, 'Address Id is null'),\n\texpectTrue(lower(address_type) == 'residence' || lower(address_type) == 'business', false, 'addressTypeValid', null, \"Address is not residence or business\"),\n\texpectTrue(address1 != \"\", false, 'address1NotBlank', null, 'Address1 is blank'),\n\texpectTrue(isInteger(zipcode), false, 'zipcodeNumeric', null, \"Zipcode is not numeric\"),\n\texpectTrue(length(toString(phone)) == 11, false, 'phoneNumberNot11digits', null, toString(phone) + \" Invalid Phone number length\"),\n\texpectTrue(regexMatch(email, `^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$`), false, 'validEmail', null, email + \" is an invalid email\"),\n\texpectTrue(length(toString(Fax)) == 11, false, 'FaxNumberNot11digits', null, toString(Fax) + \" Invalid Phone number length\")) ~> AddressesValidation\nAddressesValidation derive(address1 = upper(address1),\n\t\taddress2 = upper(address2),\n\t\taddress3 = upper(address3),\n\t\taddress_type = initCap(address_type),\n\t\tphone = substring(phone, 1, 1) + \"-\" + substring(phone, 2, 3) + \"-\" + substring(phone, 5, 3) + \"-\" + substring(phone, 8, 4),\n\t\tFax = substring(Fax, 1, 1) + \"-\" + substring(Fax, 2, 3) + \"-\" + substring(Fax, 5, 3) + \"-\" + substring(Fax, 8, 4)) ~> AddressesTransformation\nAddresses derive(address1 = iif(isNull(address1), \"N/A\", address1),\n\t\taddress2 = iif(isNull(address2), \"N/A\", address2),\n\t\taddress3 = iif(isNull(address3), \"N/A\", address3)) ~> AddressesWna\nAddressesTransformation filter(isError()) ~> Filter1\nAddressesTransformation, Customers exists(Addresses@customer_id == Customers@customer_id,\n\tnegate:true,\n\tbroadcast: 'auto')~> CustomerIDExists\nFilter1, CustomerIDExists, CityStateCountryExists union(byName: true)~> Union1\nAddressesTransformation, CityStateCountry exists(Addresses@city == CityStateCountry@City\n\t&& Addresses@state == CityStateCountry@State\n\t&& Addresses@country == CityStateCountry@Country,\n\tnegate:true,\n\tbroadcast: 'auto')~> CityStateCountryExists\nAddressesTransformation sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> AddressesClean\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 0) ~> addressesErrors"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/customerIDs')]",
				"[concat(variables('factoryId'), '/datasets/cityStateCountry')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/convertSourceFilesParquet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "old"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "cAddresses",
								"type": "DatasetReference"
							},
							"name": "Addresses"
						},
						{
							"dataset": {
								"referenceName": "cCustomers",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "cProducts",
								"type": "DatasetReference"
							},
							"name": "Products"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Addresses",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Customers",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "Products",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\taddress_id as long,\n\t\taddress_type as string,\n\t\taddress1 as string,\n\t\taddress2 as string,\n\t\taddress3 as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tcountry as string,\n\t\tzipcode as string,\n\t\tphone as string,\n\t\temail as string,\n\t\tFax as string,\n\t\tcustomer_id as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Addresses\nsource(output(\n\t\tcustomer_id as long,\n\t\tsource_id as string,\n\t\tfirst_name as string,\n\t\tmiddle_name as string,\n\t\tlast_name as string,\n\t\tdob as date,\n\t\tgender as string,\n\t\tnationality as string,\n\t\tmarital_status as string,\n\t\toccupation as string,\n\t\tavg_family_size as integer,\n\t\tincome_level as string,\n\t\tdate_onboarded as date,\n\t\tcreated_date as date,\n\t\tupdated_date as date,\n\t\teffective_start_date as date,\n\t\teffective_end_date as date,\n\t\tIdentifier_type as string,\n\t\tidentifier as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdateFormats: ['MM/dd/yyyy']) ~> Customers\nsource(output(\n\t\tproduct_id as long,\n\t\tproduct_name as string,\n\t\tproduct_type as string,\n\t\tproduct_description as string,\n\t\tissue_date as date,\n\t\tvalid_till_date as date,\n\t\taccount_status as string,\n\t\tcredit_card_limit as long,\n\t\tinterest_rate as double,\n\t\ttenure as long,\n\t\tservice_charges as long,\n\t\tcustomer_id as long,\n\t\tfd_principal_amount as long,\n\t\tloan_collateral_value as long,\n\t\tloan_amount as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdateFormats: ['yyyy/MM/dd']) ~> Products\nAddresses sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1\nCustomers sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2\nProducts sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink3"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/cAddresses')]",
				"[concat(variables('factoryId'), '/datasets/cCustomers')]",
				"[concat(variables('factoryId'), '/datasets/cProducts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customerAuxLists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Setup Auxiliary Datasets"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Customers",
								"type": "DatasetReference"
							},
							"name": "Customers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "occupations",
								"type": "DatasetReference"
							},
							"name": "Occupations"
						},
						{
							"dataset": {
								"referenceName": "customerIDs",
								"type": "DatasetReference"
							},
							"name": "CustomerIDs"
						}
					],
					"transformations": [
						{
							"name": "Aggregate1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Aggregate2"
						},
						{
							"name": "Select3"
						},
						{
							"name": "Select4"
						}
					],
					"script": "source(output(\n\t\tcustomer_id as long,\n\t\tsource_id as string,\n\t\tfirst_name as string,\n\t\tmiddle_name as string,\n\t\tlast_name as string,\n\t\tdob as timestamp,\n\t\tgender as string,\n\t\tnationality as string,\n\t\tmarital_status as string,\n\t\toccupation as string,\n\t\tavg_family_size as integer,\n\t\tincome_level as string,\n\t\tdate_onboarded as timestamp,\n\t\tcreated_date as timestamp,\n\t\tupdated_date as timestamp,\n\t\teffective_start_date as timestamp,\n\t\teffective_end_date as timestamp,\n\t\tIdentifier_type as string,\n\t\tidentifier as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> Customers\nSelect1 aggregate(groupBy(customer_id),\n\tcount = count(customer_id)) ~> Aggregate1\nCustomers select(mapColumn(\n\t\tcustomer_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nCustomers select(mapColumn(\n\t\toccupation\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 aggregate(groupBy(occupation),\n\tcount = count(occupation)) ~> Aggregate2\nAggregate1 select(mapColumn(\n\t\tcustomer_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nAggregate2 select(mapColumn(\n\t\toccupation\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select4\nSelect4 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tinput(\n\t\toccupation as string\n\t),\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Occupations\nSelect3 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tinput(\n\t\tcustomer_id as long\n\t),\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CustomerIDs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/occupations')]",
				"[concat(variables('factoryId'), '/datasets/customerIDs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customerETL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Customers",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "occupations",
								"type": "DatasetReference"
							},
							"name": "Occupations"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Customers_clean",
								"type": "DatasetReference"
							},
							"name": "CustomersClean"
						},
						{
							"dataset": {
								"referenceName": "Customers_errors",
								"type": "DatasetReference"
							},
							"name": "CustomersErrors"
						}
					],
					"transformations": [
						{
							"name": "ValidatedCustomers"
						},
						{
							"name": "customersTransformed"
						},
						{
							"name": "hasErrors"
						},
						{
							"name": "OccupationExists"
						},
						{
							"name": "Union1"
						}
					],
					"script": "source(output(\n\t\tcustomer_id as long,\n\t\tsource_id as string,\n\t\tfirst_name as string,\n\t\tmiddle_name as string,\n\t\tlast_name as string,\n\t\tdob as timestamp,\n\t\tgender as string,\n\t\tnationality as string,\n\t\tmarital_status as string,\n\t\toccupation as string,\n\t\tavg_family_size as integer,\n\t\tincome_level as string,\n\t\tdate_onboarded as timestamp,\n\t\tcreated_date as timestamp,\n\t\tupdated_date as timestamp,\n\t\teffective_start_date as timestamp,\n\t\teffective_end_date as timestamp,\n\t\tIdentifier_type as string,\n\t\tidentifier as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tdateFormats: ['MM/dd/yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy HH:mm:ss']) ~> Customers\nsource(output(\n\t\toccupation as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> Occupations\nCustomers assert(expectTrue(!isNull(customer_id), false, 'custIDNotNull', null, \"Customer Id may not be null\"),\n\texpectTrue(upper(source_id) == \"ERP\", false, 'sourceIDERP', null, source_id + \" is an invalid source id -- must be ERP\"),\n\texpectTrue(first_name != \"\", false, 'firstNameNotBlank', null, toString(customer_id) + \": First Name must not be blank\"),\n\texpectTrue(last_name != \"\", false, 'lastNameNotBlank', null, toString(customer_id) + \": Last name is blank\"),\n\texpectTrue(gender == \"Male\" || gender == \"Female\", false, 'maleOrFemale', null, gender + \": is not a valid gender\"),\n\texpectTrue(marital_status == \"Married\" || marital_status == \"Single\", false, 'maritalStatus', null, marital_status + \": is not a valid marital status\"),\n\texpectTrue(avg_family_size > 0, false, 'avgFamilyNot0', null, toString(avg_family_size) + \": is an invalid family size. Must be numeric and cannot be 0.\"),\n\texpectTrue(income_level == \"Low\" || income_level == \"Medium\" || income_level == \"High\", false, 'incomeLevelValid', null, income_level + \": is invalid income level. Must be Low-Medium-High\"),\n\texpectTrue(length(identifier) == 11, false, 'identifierLength11', null, identifier + \": is invalid identifier. Must be 11 characters long.\")) ~> ValidatedCustomers\nValidatedCustomers derive(source_id = upper(source_id),\n\t\tfirst_name = upper(first_name),\n\t\tmiddle_name = upper(middle_name),\n\t\tlast_name = upper(last_name)) ~> customersTransformed\ncustomersTransformed filter(isError()) ~> hasErrors\ncustomersTransformed, Occupations exists(Customers@occupation == Occupations@occupation,\n\tnegate:true,\n\tbroadcast: 'auto')~> OccupationExists\nhasErrors, OccupationExists union(byName: true)~> Union1\ncustomersTransformed sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CustomersClean\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CustomersErrors"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/occupations')]"
			]
		}
	]
}