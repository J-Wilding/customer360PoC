{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "wilding360DF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/generateChurn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Customers_clean",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "Addresses_clean",
								"type": "DatasetReference"
							},
							"name": "Addresses"
						},
						{
							"dataset": {
								"referenceName": "cityStateCountry",
								"type": "DatasetReference"
							},
							"name": "cityStateCountry"
						},
						{
							"dataset": {
								"referenceName": "Products_clean",
								"type": "DatasetReference"
							},
							"name": "Products"
						},
						{
							"dataset": {
								"referenceName": "Srs_clean",
								"type": "DatasetReference"
							},
							"name": "SRS"
						},
						{
							"dataset": {
								"referenceName": "Transactions_clean",
								"type": "DatasetReference"
							},
							"name": "Transactions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Churn",
								"type": "DatasetReference"
							},
							"name": "Churn"
						}
					],
					"transformations": [
						{
							"name": "Join1"
						},
						{
							"name": "customerIDCountry"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "customers1"
						},
						{
							"name": "customerCountries"
						},
						{
							"name": "Exists1"
						},
						{
							"name": "Join2"
						},
						{
							"name": "ProductInfo"
						},
						{
							"name": "RemoveColumns1",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "avgFeedbackScore"
						},
						{
							"name": "depositsWithdrawls"
						},
						{
							"name": "Join3"
						},
						{
							"name": "Join4"
						}
					],
					"script": "source(output(\n\t\tcustomer_id as long,\n\t\tsource_id as string,\n\t\tfirst_name as string,\n\t\tmiddle_name as string,\n\t\tlast_name as string,\n\t\tdob as timestamp,\n\t\tgender as string,\n\t\tnationality as string,\n\t\tmarital_status as string,\n\t\toccupation as string,\n\t\tavg_family_size as integer,\n\t\tincome_level as string,\n\t\tdate_onboarded as timestamp,\n\t\tcreated_date as timestamp,\n\t\tupdated_date as timestamp,\n\t\teffective_start_date as timestamp,\n\t\teffective_end_date as timestamp,\n\t\tIdentifier_type as string,\n\t\tidentifier as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> Customers\nsource(output(\n\t\taddress_id as long,\n\t\taddress_type as string,\n\t\taddress1 as string,\n\t\taddress2 as string,\n\t\taddress3 as string,\n\t\tcity as string,\n\t\tstate as string,\n\t\tcountry as string,\n\t\tzipcode as string,\n\t\tphone as string,\n\t\temail as string,\n\t\tFax as string,\n\t\tcustomer_id as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> Addresses\nsource(output(\n\t\tCity as string,\n\t\tState as string,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> cityStateCountry\nsource(output(\n\t\tproduct_id as long,\n\t\tproduct_name as string,\n\t\tproduct_type as string,\n\t\tproduct_description as string,\n\t\tissue_date as string,\n\t\tvalid_till_date as string,\n\t\taccount_status as string,\n\t\tcredit_card_limit as long,\n\t\tinterest_rate as double,\n\t\ttenure as long,\n\t\tservice_charges as long,\n\t\tcustomer_id as long,\n\t\tfd_principal_amount as long,\n\t\tloan_collateral_value as long,\n\t\tloan_amount as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> Products\nsource(output(\n\t\tsr_id as long,\n\t\tcustomer_id as long,\n\t\tproduct_id as long,\n\t\tsr_description as string,\n\t\tsr_open_date as timestamp,\n\t\tsr_close_date as timestamp,\n\t\tsr_type as string,\n\t\tchannel as string,\n\t\tsr_cust_feedback as string,\n\t\tfeedback_type as string,\n\t\tfeedback_severity as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> SRS\nsource(output(\n\t\ttransaction_id as long,\n\t\tcustomer_id as long,\n\t\tproduct_id as long,\n\t\tmerchant_name as string,\n\t\ttransaction_description as string,\n\t\ttransaction_amount as long,\n\t\ttype_deposit_withdrawal as string,\n\t\ttransaction_date as timestamp,\n\t\tchannel as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> Transactions\ncustomers1, customerCountries join(customers1@customer_id == customerCountries@customer_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tcustomer_id = customers1@customer_id,\n\t\tcountry,\n\t\tage = dob,\n\t\tgender\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> customerIDCountry\nJoin2 derive(credit_score = toInteger(random(1)*215 + 600),\n\t\tage = toInteger(monthsBetween(currentTimestamp(), age) / 12),\n\t\thas_credit_card = iif(has_credit_card > 0, true(), false())) ~> DerivedColumn1\nCustomers aggregate(groupBy(customer_id,\n\t\tdob,\n\t\tgender),\n\tcount = count()) ~> customers1\nExists1 aggregate(groupBy(customer_id,\n\t\tcountry,\n\t\tstate),\n\tcount = count()) ~> customerCountries\nAddresses, cityStateCountry exists(Addresses@country == cityStateCountry@Country,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists1\ncustomerIDCountry, ProductInfo join(customerIDCountry@customer_id == ProductInfo@customer_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nProducts aggregate(groupBy(customer_id),\n\ttenure = sum(tenure),\n\t\tnumber_of_products = count(),\n\t\thas_credit_card = countIf(product_type == \"CREDIT CARD\" && account_status == \"open\", customer_id),\n\t\tis_active = iif(countIf(account_status == \"closed\") == count(), false(), true()),\n\t\texited = !iif(countIf(account_status == \"closed\") == count(), false(), true())) ~> ProductInfo\nJoin4 select(mapColumn(\n\t\tcustomer_id = customerIDCountry@customer_id,\n\t\tcredit_score,\n\t\tcountry,\n\t\tgender,\n\t\tage,\n\t\ttenure,\n\t\tdeposits,\n\t\twithdrawls,\n\t\tnumber_of_products,\n\t\thas_credit_card,\n\t\tavg_feedback_score,\n\t\tis_active,\n\t\texited\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveColumns1\nSRS aggregate(groupBy(customer_id),\n\tavg_feedback_score = countIf(feedback_type == \"Positive\") / iif(countIf(feedback_type == \"Negative\") == 0, 1l, countIf(feedback_type == \"Negative\")),\n\t\tpositive = countIf(feedback_type == \"Positive\"),\n\t\tnegative = countIf(feedback_type == \"Negative\")) ~> avgFeedbackScore\nTransactions aggregate(groupBy(customer_id),\n\tdeposits = iifNull(sumIf(type_deposit_withdrawal == \"D\", transaction_amount), 0),\n\t\twithdrawls = iifNull(sumIf(type_deposit_withdrawal == \"W\", transaction_amount), 0)) ~> depositsWithdrawls\navgFeedbackScore, depositsWithdrawls join(avgFeedbackScore@customer_id == depositsWithdrawls@customer_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join3\nDerivedColumn1, Join3 join(customerIDCountry@customer_id == avgFeedbackScore@customer_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join4\nRemoveColumns1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tcustomer_id as long,\n\t\tcredit_score as integer,\n\t\tcountry as string,\n\t\tgender as string,\n\t\tage as integer,\n\t\ttenure as long,\n\t\tdeposits as long,\n\t\twithdrawls as long,\n\t\tnumber_of_products as long,\n\t\thas_credit_card as boolean,\n\t\tavg_feedback_score as double,\n\t\tis_active as boolean,\n\t\texited as boolean\n\t),\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1) ~> Churn"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/productsAuxLists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Setup Auxiliary Datasets"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Products",
								"type": "DatasetReference"
							},
							"name": "Products"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "productNameTypeDesc",
								"type": "DatasetReference"
							},
							"name": "ProductNameTypeDesc"
						},
						{
							"dataset": {
								"referenceName": "productIDs",
								"type": "DatasetReference"
							},
							"name": "productIDs"
						},
						{
							"dataset": {
								"referenceName": "ProductIDsCSVTest",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SelectProductNames"
						},
						{
							"name": "SelectProductIDs"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Aggregate2"
						}
					],
					"script": "source(output(\n\t\tproduct_id as long,\n\t\tproduct_name as string,\n\t\tproduct_type as string,\n\t\tproduct_description as string,\n\t\tissue_date as timestamp,\n\t\tvalid_till_date as timestamp,\n\t\taccount_status as string,\n\t\tcredit_card_limit as long,\n\t\tinterest_rate as double,\n\t\ttenure as long,\n\t\tservice_charges as long,\n\t\tcustomer_id as long,\n\t\tfd_principal_amount as long,\n\t\tloan_collateral_value as long,\n\t\tloan_amount as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> Products\nProducts select(mapColumn(\n\t\tproduct_name,\n\t\tproduct_type,\n\t\tproduct_description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectProductNames\nProducts select(mapColumn(\n\t\tproduct_id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectProductIDs\nSelectProductNames aggregate(groupBy(product_name,\n\t\tproduct_type,\n\t\tproduct_description),\n\tcount = count(product_name)) ~> Aggregate1\nSelectProductIDs aggregate(groupBy(product_id),\n\tcount = count(product_id)) ~> Aggregate2\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tproduct_name as string,\n\t\tproduct_type as string,\n\t\tproduct_description as string,\n\t\tcount as long\n\t),\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ProductNameTypeDesc\nAggregate2 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tinput(\n\t\tproduct_id as long\n\t),\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> productIDs\nAggregate2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['productsIDsCSVTest'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/productsETL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customerIDs",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "Products",
								"type": "DatasetReference"
							},
							"name": "Products"
						},
						{
							"dataset": {
								"referenceName": "productNameTypeDesc",
								"type": "DatasetReference"
							},
							"name": "ProductNameTypeDescList"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Products_clean",
								"type": "DatasetReference"
							},
							"name": "ProductsClean"
						},
						{
							"dataset": {
								"referenceName": "Products_errors",
								"type": "DatasetReference"
							},
							"name": "productsErrors"
						}
					],
					"transformations": [
						{
							"name": "Assert1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "CustomerIDExists"
						},
						{
							"name": "Union1"
						},
						{
							"name": "NameTypeDescExists"
						},
						{
							"name": "Products1"
						}
					],
					"script": "source(output(\n\t\tcustomer_id as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tdateFormats: ['MM/dd/yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy HH:mm:ss']) ~> Customers\nsource(output(\n\t\tproduct_id as long,\n\t\tproduct_name as string,\n\t\tproduct_type as string,\n\t\tproduct_description as string,\n\t\tissue_date as timestamp,\n\t\tvalid_till_date as timestamp,\n\t\taccount_status as string,\n\t\tcredit_card_limit as long,\n\t\tinterest_rate as double,\n\t\ttenure as long,\n\t\tservice_charges as long,\n\t\tcustomer_id as long,\n\t\tfd_principal_amount as long,\n\t\tloan_collateral_value as long,\n\t\tloan_amount as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tdateFormats: ['yyyy/MM/dd']) ~> Products\nsource(output(\n\t\tproduct_name as string,\n\t\tproduct_type as string,\n\t\tproduct_description as string,\n\t\tcount as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> ProductNameTypeDescList\nProducts1 assert(expectTrue(valid_till_date >= issue_date, false, 'validAfterIssueDate'),\n\texpectTrue(lower(account_status) == \"open\" || lower(account_status) == \"closed\", false, 'accountStatusOpenClosed'),\n\texpectTrue(!isNull(product_id) && isInteger(toString(product_id)), false, 'productIDNotNull')) ~> Assert1\nAssert1 derive(product_name = initCap(product_name),\n\t\tproduct_type = upper(product_type),\n\t\tproduct_description = upper(product_description),\n\t\tissue_date = toString(toDate(issue_date), \"MMM-dd-yyyy\"),\n\t\tvalid_till_date = toString(toDate(valid_till_date), \"MMM-dd-yyyy\")) ~> DerivedColumn1\nDerivedColumn1 filter(isError()) ~> Filter1\nDerivedColumn1, Customers exists(Products@customer_id == Customers@customer_id,\n\tnegate:true,\n\tbroadcast: 'auto')~> CustomerIDExists\nFilter1, CustomerIDExists, NameTypeDescExists union(byName: true)~> Union1\nDerivedColumn1, ProductNameTypeDescList exists(DerivedColumn1@product_name == ProductNameTypeDescList@product_name\n\t&& DerivedColumn1@product_type == ProductNameTypeDescList@product_type\n\t&& DerivedColumn1@product_description == ProductNameTypeDescList@product_description,\n\tnegate:true,\n\tbroadcast: 'auto')~> NameTypeDescExists\nProducts derive(valid_till_date = iif(isNull(tenure), addMonths(issue_date, 36), addMonths(issue_date, tenure)),\n\t\ttenure = iif(isNull(tenure), 36l, tenure)) ~> Products1\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ProductsClean\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> productsErrors"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/srsAuxLists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Setup Auxiliary Datasets"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SRS",
								"type": "DatasetReference"
							},
							"name": "srs"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "channels",
								"type": "DatasetReference"
							},
							"name": "channels"
						},
						{
							"dataset": {
								"referenceName": "srTypes",
								"type": "DatasetReference"
							},
							"name": "srTypes"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Aggregate2"
						}
					],
					"script": "source(output(\n\t\tsr_id as long,\n\t\tcustomer_id as long,\n\t\tproduct_id as long,\n\t\tsr_description as string,\n\t\tsr_open_date as timestamp,\n\t\tsr_close_date as timestamp,\n\t\tsr_type as string,\n\t\tchannel as string,\n\t\tsr_cust_feedback as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srs\nsrs select(mapColumn(\n\t\tsr_type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nsrs select(mapColumn(\n\t\tchannel\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nSelect2 aggregate(groupBy(channel),\n\tcount = count(channel)) ~> Aggregate1\nSelect1 aggregate(groupBy(sr_type),\n\tcount = count(sr_type)) ~> Aggregate2\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tchannel as string,\n\t\tcount as long\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> channels\nAggregate2 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tinput(\n\t\tsr_type as string,\n\t\tcount as long\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> srTypes"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/srsETL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customerIDs",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "SRS",
								"type": "DatasetReference"
							},
							"name": "SRS"
						},
						{
							"dataset": {
								"referenceName": "srTypes",
								"type": "DatasetReference"
							},
							"name": "srTypes"
						},
						{
							"dataset": {
								"referenceName": "productIDs",
								"type": "DatasetReference"
							},
							"name": "productIDs"
						},
						{
							"dataset": {
								"referenceName": "channels",
								"type": "DatasetReference"
							},
							"name": "channels"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Srs_clean",
								"type": "DatasetReference"
							},
							"name": "SrsClean"
						},
						{
							"dataset": {
								"referenceName": "Srs_errors",
								"type": "DatasetReference"
							},
							"name": "srsErrors"
						}
					],
					"transformations": [
						{
							"name": "Asserts"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Union"
						},
						{
							"name": "custIDExists"
						},
						{
							"name": "prodIDExists"
						},
						{
							"name": "srTypeExists"
						},
						{
							"name": "channelExists"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tcustomer_id as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tdateFormats: ['MM/dd/yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy HH:mm:ss']) ~> Customers\nsource(output(\n\t\tsr_id as long,\n\t\tcustomer_id as long,\n\t\tproduct_id as long,\n\t\tsr_description as string,\n\t\tsr_open_date as timestamp,\n\t\tsr_close_date as timestamp,\n\t\tsr_type as string,\n\t\tchannel as string,\n\t\tsr_cust_feedback as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tdateFormats: ['yyyy/MM/dd']) ~> SRS\nsource(output(\n\t\tsr_type as string,\n\t\tcount as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> srTypes\nsource(output(\n\t\tproduct_id as long,\n\t\tcount as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> productIDs\nsource(output(\n\t\tchannel as string,\n\t\tcount as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> channels\nDerivedColumn1 assert(expectTrue(!isNull(sr_id), false, 'srIDNotNull'),\n\texpectTrue(length(sr_description) > 0 && length(sr_description) <= 100, false, 'descriptionLength'),\n\texpectTrue(sr_close_date >= sr_open_date, false, 'validCloseDate'),\n\texpectTrue(length(sr_cust_feedback) > 0 && length(sr_cust_feedback) <= 100, false, 'custFeedbackLength')) ~> Asserts\nAsserts filter(isError()) ~> Filter1\nFilter1, custIDExists, prodIDExists, srTypeExists, channelExists union(byName: true)~> Union\nAsserts, Customers exists(SRS@customer_id == Customers@customer_id,\n\tnegate:true,\n\tbroadcast: 'auto')~> custIDExists\nAsserts, productIDs exists(SRS@product_id == productIDs@product_id,\n\tnegate:true,\n\tbroadcast: 'auto')~> prodIDExists\nAsserts, srTypes exists(SRS@sr_type == srTypes@sr_type,\n\tnegate:true,\n\tbroadcast: 'auto')~> srTypeExists\nAsserts, channels exists(SRS@channel == channels@channel,\n\tnegate:true,\n\tbroadcast: 'auto')~> channelExists\nSRS derive(feedback_type = iif(\r\n    reduce(split(sr_cust_feedback, \" \"), false(), #acc || in([\"fantastic\", \"great\", \"satisfied\", \"satisfactory\", \"satisfaction\", \"happy\", \"serve\", \"served\", \"serving\", \"timely\", \"prompt\"], lower(#item)), #result),\r\n    \"Positive\",\r\n    \"Negative\"\r\n    ),\n\t\tfeedback_severity = case(    \r\n    reduce(\r\n        split(sr_cust_feedback, \" \"), \r\n        false(), \r\n        #acc || in([\"should\", \"interest\", \"quicker\", \"quick\", \"switch\", \"switching\", \"bank\", \"need\", \"needs\", \"horrible\", \"terrible\", \"bad\", \"unhappy\", \"about\" ,\"very\"], lower(#item)), \r\n        #result\r\n        ),    \r\n    \"High\",    \r\n    case(\r\n        reduce(\r\n            split(sr_cust_feedback, \" \"), \r\n            false(), \r\n            #acc || in([\"timely\", \"higher\", \"high\", \"prompt\", \"committed\", \"improve\", \"improved\"], lower(#item)), \r\n            #result\r\n            ),    \r\n    \"Medium\",\r\n    \"Low\"\r\n    )   \r\n)) ~> DerivedColumn1\nAsserts sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tinput(\n\t\tsr_id as long,\n\t\tcustomer_id as long,\n\t\tproduct_id as long,\n\t\tsr_description as string,\n\t\tsr_open_date as timestamp,\n\t\tsr_close_date as timestamp,\n\t\tsr_type as string,\n\t\tchannel as string,\n\t\tsr_cust_feedback as string,\n\t\tfeedback_type as string,\n\t\tfeedback_severity as string\n\t),\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SrsClean\nUnion sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> srsErrors"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/transactionsAuxList')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Setup Auxiliary Datasets"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Transactions",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "merchantNames",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\ttransaction_id as long,\n\t\tcustomer_id as long,\n\t\tproduct_id as long,\n\t\tmerchant_name as string,\n\t\ttransaction_description as string,\n\t\ttransaction_amount as long,\n\t\ttype_deposit_withdrawal as string,\n\t\ttransaction_date as timestamp,\n\t\tchannel as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> source1\nsource1 select(mapColumn(\n\t\tmerchant_name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(merchant_name),\n\tcount = count(merchant_name)) ~> Aggregate1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tinput(\n\t\tmerchant_name as string,\n\t\tcount as long\n\t),\n\tformat: 'parquet',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/transactionsETL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customerIDs",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "Transactions",
								"type": "DatasetReference"
							},
							"name": "Transactions"
						},
						{
							"dataset": {
								"referenceName": "productIDs",
								"type": "DatasetReference"
							},
							"name": "productIDs"
						},
						{
							"dataset": {
								"referenceName": "merchantNames",
								"type": "DatasetReference"
							},
							"name": "merchants"
						},
						{
							"dataset": {
								"referenceName": "channels",
								"type": "DatasetReference"
							},
							"name": "channels"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Transactions_clean",
								"type": "DatasetReference"
							},
							"name": "TransactionsClean"
						},
						{
							"dataset": {
								"referenceName": "Transactions_errors",
								"type": "DatasetReference"
							},
							"name": "transactionsErrors"
						}
					],
					"transformations": [
						{
							"name": "Assert1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "customerIDExists"
						},
						{
							"name": "productIDExists"
						},
						{
							"name": "merchantExists"
						},
						{
							"name": "channelExists"
						},
						{
							"name": "Union1"
						}
					],
					"script": "source(output(\n\t\tcustomer_id as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tdateFormats: ['MM/dd/yyyy'],\n\ttimestampFormats: ['MM/dd/yyyy HH:mm:ss']) ~> Customers\nsource(output(\n\t\ttransaction_id as long,\n\t\tcustomer_id as long,\n\t\tproduct_id as long,\n\t\tmerchant_name as string,\n\t\ttransaction_description as string,\n\t\ttransaction_amount as long,\n\t\ttype_deposit_withdrawal as string,\n\t\ttransaction_date as timestamp,\n\t\tchannel as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tdateFormats: ['yyyy/MM/dd']) ~> Transactions\nsource(output(\n\t\tproduct_id as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> productIDs\nsource(output(\n\t\tmerchant_name as string,\n\t\tcount as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> merchants\nsource(output(\n\t\tchannel as string,\n\t\tcount as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> channels\nTransactions assert(expectTrue(!isNull(transaction_id) && isInteger(toString(transaction_id)), false, 'srIDNotNull'),\n\texpectTrue(!isNull(transaction_amount) && isInteger(toString(transaction_amount)), false, 'transactionAmt'),\n\texpectTrue(type_deposit_withdrawal == \"D\" || type_deposit_withdrawal == \"W\", false, 'validType')) ~> Assert1\nAssert1 filter(isError()) ~> Filter1\nAssert1, Customers exists(Transactions@customer_id == Customers@customer_id,\n\tnegate:true,\n\tbroadcast: 'auto')~> customerIDExists\nAssert1, productIDs exists(Transactions@product_id == productIDs@product_id,\n\tnegate:true,\n\tbroadcast: 'auto')~> productIDExists\nAssert1, merchants exists(Transactions@merchant_name == merchants@merchant_name,\n\tnegate:true,\n\tbroadcast: 'auto')~> merchantExists\nAssert1, channels exists(Transactions@channel == channels@channel,\n\tnegate:true,\n\tbroadcast: 'auto')~> channelExists\nFilter1, productIDExists, channelExists, customerIDExists, merchantExists union(byName: true)~> Union1\nAssert1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TransactionsClean\nUnion1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tformat: 'parquet',\n\ttruncate: true,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> transactionsErrors"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "addressesETL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "addressesETL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Addresses": {},
									"Customers": {},
									"CityStateCountry": {},
									"AddressesClean": {},
									"addressesErrors": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "customerETL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "addressesETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "customerETL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customers": {},
									"Occupations": {},
									"CustomersClean": {},
									"CustomersErrors": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "productsETL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "customerETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "productsETL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customers": {},
									"Products": {},
									"ProductNameTypeDescList": {},
									"ProductsClean": {},
									"productsErrors": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "transactionsETL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "productsETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "transactionsETL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customers": {},
									"Transactions": {},
									"productIDs": {},
									"merchants": {},
									"channels": {},
									"TransactionsClean": {},
									"transactionsErrors": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "srsETL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "transactionsETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "srsETL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customers": {},
									"SRS": {},
									"srTypes": {},
									"productIDs": {},
									"channels": {},
									"SrsClean": {},
									"srsErrors": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/productsETL')]",
				"[concat(variables('factoryId'), '/dataflows/transactionsETL')]",
				"[concat(variables('factoryId'), '/dataflows/srsETL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/genAuxFiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "srsAuxLists",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "productsAuxLists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "srsAuxLists",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srs": {},
									"channels": {},
									"srTypes": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "transactionsAuxList",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "srsAuxLists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "transactionsAuxList",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "customerAuxLists",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "customerAuxLists",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customers": {},
									"Occupations": {},
									"CustomerIDs": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "productsAuxLists",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "customerAuxLists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "productsAuxLists",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Products": {},
									"ProductNameTypeDesc": {},
									"productIDs": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/srsAuxLists')]",
				"[concat(variables('factoryId'), '/dataflows/transactionsAuxList')]",
				"[concat(variables('factoryId'), '/dataflows/productsAuxLists')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "generateChurn",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "productsETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "generateChurn",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customers": {},
									"Addresses": {},
									"cityStateCountry": {},
									"Products": {},
									"SRS": {},
									"Transactions": {},
									"Churn": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "productsETL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "productsETL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customers": {},
									"Products": {},
									"ProductNameTypeDescList": {},
									"ProductsClean": {},
									"productsErrors": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/generateChurn')]",
				"[concat(variables('factoryId'), '/dataflows/productsETL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customer360_PoC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "generateChurn",
						"description": "Gold Tier",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "generateChurn",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customers": {},
									"Addresses": {},
									"cityStateCountry": {},
									"Products": {},
									"SRS": {},
									"Transactions": {},
									"Churn": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "UpdateDashboard",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "generateChurn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/jonathan.wilding@hcl.com/Customer360PoC/churn_prediction"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ChurnPrediction",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "generateChurn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/jonathan.wilding@hcl.com/Customer360PoC/churn_prediction"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ETL",
						"description": "Silver Tier",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "cpCSVtoParquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ETL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "cpCSVtoParquet",
						"description": "Bronze Tier",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "cpCSVtoParquet",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-07T21:36:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/generateChurn')]",
				"[concat(variables('factoryId'), '/pipelines/ETL')]"
			]
		}
	]
}